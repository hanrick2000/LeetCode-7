//Given two strings s and t which consist of only lowercase letters.
//
//String t is generated by random shuffling string s and then add one more letter at a random position.
//
//Find the letter that was added in t.
//
//Example:
//
//Input:
//s = "abcd"
//t = "abcde"
//
//Output:
//e
//
//Explanation:
//'e' is the letter that was added.

//hashset做法不说了，傻逼一样。 这里练一下位操作， 其实和duplicate number的做法一样。只不过位操作可以用来替代hashset, 一个字符出现与否可以用一个整数的相应位1还是0来表示，把所有字符都异或，多出来的那个字符那一位上一定是1.所以就可以找到这个字符

class Solution {
public:
    char findTheDifference(string s, string t) {
        
        int bit = 0;
        
        for(int i = 0; i < s.size(); ++i) {
            bit^=(1<<s[i]-'a');
        }
        
        for(int i = 0; i < t.size(); ++i) {
            bit^=(1<<t[i]-'a');
        }
        
        int i = 0;
        
        while(bit!=1) {
            bit>>=1;
            ++i;
        }
        
        return i+'a';
        
    }
};